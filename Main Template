// ctrl + alt + B to run the file
/*
    author : rxhanggs
*/
#include<bits/stdc++.h>
using namespace std;
#define vi vector<int>
#define nl '\n'
#define fastio ios_base::sync_with_stdio(false);cin.tie(NULL);
#define sp " "
#define pb push_back
#define vll vector<long long>
#define vii vector<pair<int,int>>
#define pii pair<int,int>
#define mp make_pair
#define setcountsi __builtin_popcount
#define setcountsll __builtin_popcountll
#define ff first
#define ss second

typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;

const int M = 1e9+7;

template <typename T>
void sortAD(vector<T>& arr) {
    sort(arr.begin(), arr.end(), greater<T>());
}
template <typename T>
T ceil2(T a, T b){
    return (a+b-1)/b;
}
template <typename T>
void sortall(vector<T>& arr) {
    sort(arr.begin(), arr.end());
}
template<typename T>
int binPow(T a , T b){
    T ans = 1;
    while(b){
        if(b&1){
            ans = (ans * 1LL * a) % M;
        }
        a = (a*1LL*a)%M;
        b >>= 1;
    }
    
    return ans;
}
template <typename T>
T gcd(T a, T b) {
    while (b != 0) {
        T temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}
template <typename T>
T lcm(T a, T b) {
    return (a / gcd(a, b)) * b;  
}
template <typename T>
bool odd(T number) {
    return (number & 1) != 0;
}

template <typename T>
bool even(T number) {
    return (number & 1) == 0;
}

#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif

void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V>void _print(unordered_map<T, V> m) {cerr << "{ ";for (auto &p : m) {cerr << "{";_print(p.first); cerr << ": ";_print(p.second); cerr << "} ";}cerr << "}";}
template <typename T, size_t N>void _print(T (&arr)[N]) {cerr << "[ ";for (size_t i = 0; i < N; i++) {cerr << arr[i] << " ";}cerr << "]";}
// *************************
// *  Happy Solving!        *
// *************************
int d8x[8] = { 0, 0, -1, 1, -1, 1, -1, 1 }; 
int d8y[8] = { -1, 1, 0, 0, -1, -1, 1, 1 }; 
int d4x[4] = {0,1,0,-1};
int d4y[4] = {-1,0,1,0};

vector<long long> trial_division3(long long n) {
    vector<long long> factorization;
    for (int d : {2, 3, 5}) {
        while (n % d == 0) {
            factorization.push_back(d);
            n /= d;
        }
    }
    static array<int, 8> increments = {4, 2, 4, 2, 4, 6, 2, 6};
    int i = 0;
    for (long long d = 7; d * d <= n; d += increments[i++]) {
        while (n % d == 0) {
            factorization.push_back(d);
            n /= d;
        }
        if (i == 8)
            i = 0;
    }
    if (n > 1)
        factorization.push_back(n);
    return factorization;
}


const int MAX = 100000; 
vector<ll> fact(MAX + 1, 1);
vector<ll> invFact(MAX + 1, 1);

void compute() {
    for (int i = 2; i <= MAX; i++) {
        fact[i] = fact[i - 1] * i % M;
    }
    
    invFact[MAX] = binPow(1LL * fact[MAX], 1ll*M - 2); // Modular inverse of fact[MAX]
    
    for (int i = MAX - 1; i >= 1; --i) {
        invFact[i] = invFact[i + 1] * (i + 1) % M;
    }    
}

long long ncr(long long n, long long r) {
    if (r > n || r < 0) return 0;
    return (fact[n] * invFact[r] % M * invFact[n - r] % M) % M;
}


struct Node{
    int data;
    Node* left;
    Node* right;
};
Node* createNode(int data){
    Node* node = (Node*)malloc(sizeof(Node));
    node->data = data;
    node->left = node->right = NULL;
}
Node* insertLevelOrderTraversal(vector<int>& a,int i ,int n){
    Node* root = nullptr;
    if(i < n){
        root = createNode(a[i]);
        root->left = insertLevelOrderTraversal(a,2*i+1,n);
        root->right = insertLevelOrderTraversal(a,2*i+2,n);
    }
    return root;
}
Node* BST(vector<int>& a,int start ,int end){
    if(start > end) return nullptr;
    
    int mid = start + (end-start) /2 ;
    
    Node* root = createNode(a[mid]);
    
    root->left = BST(a,start,mid-1);
    root->right = BST(a,mid+1,end);
    
    return root;
}
void Inorder(Node* root){
    if(root != NULL){
        Inorder(root->left);
        cout << root->data << sp;
        Inorder(root->right);
    }
}
void PreOrder(Node* root){
    if(root != NULL){
        cout << root->data << sp;
        PreOrder(root->left);
        PreOrder(root->right);
    }
}
Node* convertBSTToGSTHelper(Node* root, int sum) {
    if (root == nullptr) {
        return root;
    }
    
    root->right = convertBSTToGSTHelper(root->right, sum);
    
    root->data += sum;
    
    root->left = convertBSTToGSTHelper(root->left, root->data);

    return root;
}
Node* convertBSTToGST(Node* root) {
    return convertBSTToGSTHelper(root, 0);
}
void PostOrder(Node* root){
    if(root != NULL){
        PostOrder(root->left);
        PostOrder(root->right);
        cout << root->data << sp;
    }
}

using Edge = pair<int, int>;
void dijkstra(int N, vector<pair<int, int>> graph[], int source,vector<int>& distances) {
    vector<int> visited(N, false);
    
    priority_queue<Edge, vector<Edge>, greater<Edge>> pq;
    pq.push({0, source});
    
    distances[source] = 0;
    visited[source] = true;
    
    while (!pq.empty()) {
        int current_dist = pq.top().first;
        int current_node = pq.top().second;
        pq.pop();
        
        for (auto neighbor : graph[current_node]) {
            int neighbor_dist = neighbor.first;
            int neighbor_node = neighbor.second;
            
            if (current_dist + neighbor_dist < distances[neighbor_node]) {
                distances[neighbor_node] = current_dist + neighbor_dist;
                pq.push({distances[neighbor_node], neighbor_node});
            }
        }
    }
}

void solve(){
    
}

int main(){
    
    #ifndef ONLINE_JUDGE
    freopen("Error.txt", "w", stderr);
    #endif
    
    fastio;
    int t = 1 ;
    // cin >> t ;
    while(t--){
        solve();
    }
    return 0;
}
