struct Node{
    int data;
    Node* left;
    Node* right;
};
Node* createNode(int data){
    Node* node = (Node*)malloc(sizeof(Node));
    node->data = data;
    node->left = node->right = NULL;
}
Node* insertLevelOrderTraversal(vector<int>& a,int i ,int n){
    Node* root = nullptr;
    if(i < n){
        root = createNode(a[i]);
        root->left = insertLevelOrderTraversal(a,2*i+1,n);
        root->right = insertLevelOrderTraversal(a,2*i+2,n);
    }
    return root;
}
Node* BST(vector<int>& a,int start ,int end){
    if(start > end) return nullptr;
    
    int mid = start + (end-start) /2 ;
    
    Node* root = createNode(a[mid]);
    
    root->left = BST(a,start,mid-1);
    root->right = BST(a,mid+1,end);
    
    return root;
}
void Inorder(Node* root){
    if(root != NULL){
        Inorder(root->left);
        cout << root->data << sp;
        Inorder(root->right);
    }
}
void PreOrder(Node* root){
    if(root != NULL){
        cout << root->data << sp;
        PreOrder(root->left);
        PreOrder(root->right);
    }
}
Node* convertBSTToGSTHelper(Node* root, int sum) {
    if (root == nullptr) {
        return root;
    }
    
    root->right = convertBSTToGSTHelper(root->right, sum);
    
    root->data += sum;
    
    root->left = convertBSTToGSTHelper(root->left, root->data);

    return root;
}
Node* convertBSTToGST(Node* root) {
    return convertBSTToGSTHelper(root, 0);
}
void PostOrder(Node* root){
    if(root != NULL){
        PostOrder(root->left);
        PostOrder(root->right);
        cout << root->data << sp;
    }
}
